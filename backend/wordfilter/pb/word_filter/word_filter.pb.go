// Code generated by protoc-gen-go. DO NOT EDIT.
// source: word_filter.proto

/*
Package word_filter is a generated protocol buffer package.

It is generated from these files:
	word_filter.proto

It has these top-level messages:
	KeyWord
	FindKeyWordsRes
	Text
	Empty
*/
package word_filter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeyWord struct {
	Word    string `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
	Attr    int32  `protobuf:"varint,2,opt,name=attr" json:"attr,omitempty"`
	Replace string `protobuf:"bytes,3,opt,name=replace" json:"replace,omitempty"`
}

func (m *KeyWord) Reset()                    { *m = KeyWord{} }
func (m *KeyWord) String() string            { return proto.CompactTextString(m) }
func (*KeyWord) ProtoMessage()               {}
func (*KeyWord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeyWord) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *KeyWord) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *KeyWord) GetReplace() string {
	if m != nil {
		return m.Replace
	}
	return ""
}

type FindKeyWordsRes struct {
	KeyWords []*KeyWord `protobuf:"bytes,1,rep,name=KeyWords" json:"KeyWords,omitempty"`
}

func (m *FindKeyWordsRes) Reset()                    { *m = FindKeyWordsRes{} }
func (m *FindKeyWordsRes) String() string            { return proto.CompactTextString(m) }
func (*FindKeyWordsRes) ProtoMessage()               {}
func (*FindKeyWordsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FindKeyWordsRes) GetKeyWords() []*KeyWord {
	if m != nil {
		return m.KeyWords
	}
	return nil
}

type Text struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *Text) Reset()                    { *m = Text{} }
func (m *Text) String() string            { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()               {}
func (*Text) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Text) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*KeyWord)(nil), "word_filter.KeyWord")
	proto.RegisterType((*FindKeyWordsRes)(nil), "word_filter.FindKeyWordsRes")
	proto.RegisterType((*Text)(nil), "word_filter.Text")
	proto.RegisterType((*Empty)(nil), "word_filter.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WordFilter service

type WordFilterClient interface {
	FindKeyWords(ctx context.Context, in *Text, opts ...grpc.CallOption) (*FindKeyWordsRes, error)
	GetUserDict(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Text, error)
	EditUserDict(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Empty, error)
}

type wordFilterClient struct {
	cc *grpc.ClientConn
}

func NewWordFilterClient(cc *grpc.ClientConn) WordFilterClient {
	return &wordFilterClient{cc}
}

func (c *wordFilterClient) FindKeyWords(ctx context.Context, in *Text, opts ...grpc.CallOption) (*FindKeyWordsRes, error) {
	out := new(FindKeyWordsRes)
	err := grpc.Invoke(ctx, "/word_filter.WordFilter/FindKeyWords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordFilterClient) GetUserDict(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/word_filter.WordFilter/GetUserDict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordFilterClient) EditUserDict(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/word_filter.WordFilter/EditUserDict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordFilter service

type WordFilterServer interface {
	FindKeyWords(context.Context, *Text) (*FindKeyWordsRes, error)
	GetUserDict(context.Context, *Empty) (*Text, error)
	EditUserDict(context.Context, *Text) (*Empty, error)
}

func RegisterWordFilterServer(s *grpc.Server, srv WordFilterServer) {
	s.RegisterService(&_WordFilter_serviceDesc, srv)
}

func _WordFilter_FindKeyWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordFilterServer).FindKeyWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/word_filter.WordFilter/FindKeyWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordFilterServer).FindKeyWords(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordFilter_GetUserDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordFilterServer).GetUserDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/word_filter.WordFilter/GetUserDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordFilterServer).GetUserDict(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordFilter_EditUserDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordFilterServer).EditUserDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/word_filter.WordFilter/EditUserDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordFilterServer).EditUserDict(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordFilter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "word_filter.WordFilter",
	HandlerType: (*WordFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindKeyWords",
			Handler:    _WordFilter_FindKeyWords_Handler,
		},
		{
			MethodName: "GetUserDict",
			Handler:    _WordFilter_GetUserDict_Handler,
		},
		{
			MethodName: "EditUserDict",
			Handler:    _WordFilter_EditUserDict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "word_filter.proto",
}

func init() { proto.RegisterFile("word_filter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xb3, 0xb6, 0x35, 0x3a, 0x29, 0x48, 0x07, 0x0f, 0x4b, 0xf0, 0x10, 0xf6, 0x94, 0x53,
	0x91, 0x0a, 0x7a, 0x16, 0x6d, 0x3d, 0xf4, 0xb6, 0x28, 0x1e, 0xa5, 0x76, 0x47, 0x58, 0xa8, 0x6e,
	0xd8, 0x0c, 0xd8, 0xfe, 0x3b, 0x7f, 0x9a, 0xec, 0x92, 0x68, 0xa2, 0xb9, 0xcd, 0xbc, 0x79, 0xfb,
	0xbe, 0x07, 0x0b, 0xb3, 0x4f, 0xe7, 0xcd, 0xcb, 0x9b, 0xdd, 0x31, 0xf9, 0x79, 0xe5, 0x1d, 0x3b,
	0xcc, 0x3a, 0x92, 0x5a, 0x43, 0xba, 0xa6, 0xc3, 0xb3, 0xf3, 0x06, 0x11, 0xc6, 0xe1, 0x22, 0x45,
	0x21, 0xca, 0x53, 0x1d, 0xe7, 0xa0, 0x6d, 0x98, 0xbd, 0x3c, 0x2a, 0x44, 0x39, 0xd1, 0x71, 0x46,
	0x09, 0xa9, 0xa7, 0x6a, 0xb7, 0xd9, 0x92, 0x1c, 0x45, 0x6b, 0xbb, 0xaa, 0x3b, 0x38, 0x5b, 0xd9,
	0x0f, 0xd3, 0x04, 0xd6, 0x9a, 0x6a, 0xbc, 0x84, 0x93, 0x76, 0x95, 0xa2, 0x18, 0x95, 0xd9, 0xe2,
	0x7c, 0xde, 0xad, 0xd4, 0x1c, 0xf5, 0x8f, 0x4b, 0xe5, 0x30, 0x7e, 0xa4, 0x3d, 0x07, 0x34, 0xd3,
	0x9e, 0xdb, 0x3a, 0x61, 0x56, 0x29, 0x4c, 0x96, 0xef, 0x15, 0x1f, 0x16, 0x5f, 0x02, 0x20, 0xd8,
	0x57, 0x31, 0x05, 0x6f, 0x61, 0xda, 0x05, 0xe3, 0xac, 0xc7, 0x08, 0x71, 0xf9, 0x45, 0x4f, 0xfa,
	0x53, 0x53, 0x25, 0x78, 0x0d, 0xd9, 0x03, 0xf1, 0x53, 0x4d, 0xfe, 0xde, 0x6e, 0x19, 0xb1, 0x67,
	0x8f, 0xd0, 0xfc, 0x7f, 0xaa, 0x4a, 0xf0, 0x06, 0xa6, 0x4b, 0x63, 0x7f, 0x1f, 0x0e, 0xa0, 0x07,
	0xb2, 0x54, 0xf2, 0x7a, 0x1c, 0x7f, 0xe3, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x93, 0x97, 0x62,
	0x4e, 0xa2, 0x01, 0x00, 0x00,
}
